[gd_scene load_steps=7 format=2]

[ext_resource path="res://scenes/CRT_VHS/REC.png" type="Texture" id=1]
[ext_resource path="res://assets/images/plain_background.png" type="Texture" id=2]
[ext_resource path="res://scenes/CRT_VHS/CRTFrame.png" type="Texture" id=3]

[sub_resource type="Animation" id=1]
resource_name = "Flash"
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.6 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

// THIS SHADER IS A MIX OF TWO SHADERS
// It's a mess but it does the trick
// CRT from
//https://github.com/henriquelalves/SimpleGodotCRTShader
// VHS based on
//https://www.shadertoy.com/view/4lB3Dc


uniform float screen_width = 1024;
uniform float screen_height = 600;

// Curvature
uniform float BarrelPower =1.1;
// Color bleeding
uniform float color_bleeding = 1.2;
uniform float bleeding_range_x = 3;
uniform float bleeding_range_y = 3;
// Scanline
uniform float lines_distance = 4.0;
uniform float scan_size = 2.0;
uniform float scanline_alpha = 0.9;
uniform float lines_velocity = 30.0;

vec2 distort(vec2 p) 
{

	float angle = p.y / p.x;
	float theta = atan(p.y,p.x);
	float radius = pow(length(p), BarrelPower);
	
	p.x = radius * cos(theta);
	p.y = radius * sin(theta);
	
	return 0.5 * (p + vec2(1.0,1.0));
}

void get_color_bleeding(inout vec4 current_color,inout vec4 color_left){

	current_color = current_color*vec4(color_bleeding,0.5,0.25,1);
	color_left = color_left*vec4(0.25,0.5,color_bleeding,1);
}

void get_color_scanline(vec2 uv,inout vec4 c,float TIME){
	float line_row = floor((uv.y * screen_height/scan_size) + mod(TIME*lines_velocity, lines_distance));

	float n = 1.0 - ceil((mod(line_row,lines_distance)/lines_distance));

	c = c - n*c*(1.0 - scanline_alpha);
	c.a = 1.0;

}

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void fragment()
{
	vec4 texColor = vec4(0);
	// get position to sample
	vec2 samplePosition = FRAGCOORD.xy/ vec2(screen_height, screen_width);
	float whiteNoise = 9999.0;
	
	vec2 fragCoord = FRAGCOORD.xy;
	
	 	// Jitter each line left and right
	samplePosition.x = samplePosition.x+(rand(vec2(TIME,fragCoord.y))-0.5)/64.0;
	// Jitter the whole picture up and down
	samplePosition.y = samplePosition.y+(rand(vec2(TIME))-0.5)/32.0;
	//  add color noise
	texColor = texColor + (vec4(-0.5)+vec4(rand(vec2(fragCoord.y,TIME)),rand(vec2(fragCoord.y,TIME+1.0)),rand(vec2(fragCoord.y,TIME+2.0)),0))*0.1;
	   
	whiteNoise = rand(vec2(floor(samplePosition.y*60.0),floor(samplePosition.x*60.0))+vec2(TIME,0));
	if (whiteNoise > 10.5-40.0*samplePosition.y || whiteNoise < 1.5-3.5*samplePosition.y) {
		texColor = texColor + texture(SCREEN_TEXTURE,samplePosition);
	} else {
	    // Use transparent white
	    texColor = vec4(1,1,1,0.2);
	}
	
	vec2 xy = SCREEN_UV * 2.0;
	xy.x -= 1.0;
	xy.y -= 1.0;
	
	float d = length(xy);
	if(d < 1.5){
		xy = distort(xy);
	}
	else{
		xy = fragCoord;
	}
	
	float pixel_size_x = 1.0/screen_width*bleeding_range_x;
	float pixel_size_y = 1.0/screen_height*bleeding_range_y;
	vec4 color_left = texture(SCREEN_TEXTURE,SCREEN_UV - vec2(pixel_size_x, pixel_size_y));
	vec4 current_color = texture(SCREEN_TEXTURE,SCREEN_UV);
	get_color_bleeding(current_color,color_left);
	vec4 c = current_color+color_left;
	get_color_scanline(xy,c,TIME);
	COLOR = c + texColor/10.0;
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/screen_width = 1024.0
shader_param/screen_height = 600.0
shader_param/BarrelPower = 0.9
shader_param/color_bleeding = 1.0
shader_param/bleeding_range_x = 1.0
shader_param/bleeding_range_y = 1.0
shader_param/lines_distance = 4.0
shader_param/scan_size = 3.0
shader_param/scanline_alpha = 0.875
shader_param/lines_velocity = 24.0

[node name="CRT_VHS" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2

[node name="REC" type="TextureRect" parent="."]
editor/display_folded = true
visible = false
modulate = Color( 0.666667, 0.666667, 0.666667, 0.705882 )
anchor_left = 1.0
anchor_right = 1.0
margin_left = -137.103
margin_top = 6.46176
margin_right = 118.897
margin_bottom = 262.462
rect_scale = Vector2( 0.4, 0.4 )
mouse_filter = 2
texture = ExtResource( 1 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="REC"]
autoplay = "Flash"
anims/Flash = SubResource( 1 )

[node name="CRTVHS" type="TextureRect" parent="."]
self_modulate = Color( 1, 1, 1, 0.427451 )
light_mask = 524289
material = SubResource( 3 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
texture = ExtResource( 2 )
expand = true

[node name="CRTFrame" type="TextureRect" parent="."]
light_mask = 524289
anchor_right = 1.0
anchor_bottom = 1.0
rect_scale = Vector2( 1.00002, 0.999827 )
mouse_filter = 2
texture = ExtResource( 3 )
expand = true
